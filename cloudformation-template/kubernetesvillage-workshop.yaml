AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for AWS Workshop Infrastructure by kubernetes village. Credit to AWS.

Parameters:
  Region:
    Type: String
    Default: us-west-2
    Description: AWS region to deploy resources
  AmiParameterStoreName:
    Type: String
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
    Description: AMI Parameter Store Name
  CodeServerVersion:
    Type: String
    Default: 4.91.1
    Description: Version of Code Server to use
  StackName:
    Type: String
    Default: eks-workshop
    Description: The name of the CloudFormation stack

Resources:
  # Secrets Manager for VSCode Password
  VSCodePasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${StackName}-password-secret"
      Description: "Randomly generated password for VSCode"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "vscode-user"}'
        GenerateStringKey: "password"
        PasswordLength: 32
        ExcludeCharacters: '"\''@/\'

  # VPC
  EksVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: eks_vpc

  # Internet Gateway
  EksIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: eks_igw

  EksVpcIgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref EksVpc
      InternetGatewayId: !Ref EksIgw

  # Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EksVpc
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: !Ref Region
      Tags:
        - Key: Name
          Value: public_subnet

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EksVpc
      Tags:
        - Key: Name
          Value: public_route_table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref EksIgw

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Group
  IdeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: IDE Security Group
      VpcId: !Ref EksVpc
      SecurityGroupIngress:
        - Description: Allow HTTP from CloudFront
          FromPort: 8080
          ToPort: 8080
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0  # Should be referenced to CloudFront IPs in production
        - Description: Allow traffic on port 1337
          FromPort: 1337
          ToPort: 1337
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0  # Should also be restricted in production as necessary
      SecurityGroupEgress:
        - FromPort: 0
          ToPort: 0
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ide_sg

  # IAM Role for EC2 Instance
  IdeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: eks-workshop-ide-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AdministratorAccess
      Policies:
        - PolicyName: EksWorkshopIdeSecretsManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Ref VSCodePasswordSecret

  # EC2 Instance Profile
  IdeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: eks_workshop_ide_instance_profile
      Roles:
        - !Ref IdeInstanceRole

  # EC2 Instance for Code Server
  EksInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.medium
      ImageId: !Sub "resolve:ssm:${AmiParameterStoreName}"  # Use resolve:ssm for dynamic AMI retrieval
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref IdeInstanceProfile
      SecurityGroupIds:
        - !Ref IdeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda  # Default root volume
          Ebs:
            VolumeSize: 50  # Set the size to 50 GB
            VolumeType: gp3  # Recommended for general-purpose SSD
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -x  # Print each command before executing it (for debugging)
          yum install -y git tar gzip vim nodejs npm make gcc g++ awscli jq
          curl -Ls -o /tmp/coderinstall.rpm https://github.com/coder/code-server/releases/download/v4.91.1/code-server-4.91.1-amd64.rpm
          sudo rpm -U "/tmp/coderinstall.rpm"
          npm cache clean --force
          npm install -g argon2
          systemctl enable code-server@ec2-user
          PASSWORD_SECRET=$(aws secretsmanager get-secret-value --secret-id ${VSCodePasswordSecret} --query 'SecretString' --output text)
          IDE_PASSWORD=$(echo "$PASSWORD_SECRET" | jq -r '.password')
          HASHED_PASSWORD=$(node -e "const argon2 = require('/usr/local/lib/node_modules/argon2'); argon2.hash('$IDE_PASSWORD').then(console.log).catch(console.error)")
          echo "Generated Hash: $HASHED_PASSWORD"
          sudo -u ec2-user mkdir -p /home/ec2-user/.config/code-server/
          sudo -u ec2-user touch /home/ec2-user/.config/code-server/config.yaml
          sudo -u ec2-user bash << EOF_USER
          cat << 'CONFIG_EOF' > /home/ec2-user/.config/code-server/config.yaml
          bind-addr: 0.0.0.0:8080
          auth: password
          hashed-password: "$HASHED_PASSWORD"
          cert: false
          CONFIG_EOF
          EOF_USER
          systemctl start code-server@ec2-user
          curl -s https://raw.githubusercontent.com/kubernetesvillage/CloudLabIDE/refs/heads/main/pre-deploy-folder/pre-deploy.sh | bash
      Tags:
        - Key: Name
          Value: eks-workshop-ide

  # CloudFront Distribution
  VSCodeDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt EksInstance.PublicDnsName
            Id: eks-vscode-origin
            CustomOriginConfig:
              HTTPPort: 8080
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
              OriginSSLProtocols:
                - TLSv1.2
        DefaultCacheBehavior:
          TargetOriginId: eks-vscode-origin
          ViewerProtocolPolicy: allow-all
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
            Headers:
              - '*'
        Enabled: true
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

Outputs:
  CloudFrontUrl:
    Description: "The CloudFront URL for VSCode access"
    Value: !Sub "https://${VSCodeDistribution.DomainName}"

  SecretsManagerUrl:
    Description: "URL to access the VSCode password secret"
    Value: !Sub "https://console.aws.amazon.com/secretsmanager/home?region=${Region}#/secret?name=${VSCodePasswordSecret}"
